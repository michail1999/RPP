import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;

public class FloatForm extends javax.swing.JFrame {

    public FloatForm() {
        initComponents();
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        num_f = new javax.swing.JTextField();
        rev_f = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        ANAL_BUTTON__ = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        ConvertButton = new javax.swing.JButton();

        setTitle("Float");
        setResizable(false);

        jLabel1.setText("Number");

        jLabel2.setText("Revesre bitwise");

        ANAL_BUTTON__.setText("Analyze");
        ANAL_BUTTON__.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ANAL_BUTTON__ActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {"Byte", "B", "Y", "T", "E", "№", "3", null, null, "B", "Y", "T", "E", "№", "2", null, null, "B", "Y", "T", "E", "№", "1", null, null, "B", "Y", "T", "E", "№", "0", null, null},
                        {"Bit №", "31", "30", "29", "28", "27", "26", "25", "24", "23", "22", "21", "20", "19", "18", "17", "16", "15", "14", "13", "12", "11", "10", "9", "8", "7", "6", "5", "4", "3", "2", "1", "0"},
                        {"Weight", "256", "128", "64", "32", "16", "8", "4", "2", "1", "0,5", "0,25", "0,125", "0,0625", "0,03125", "0,015625", "0,0078125", "0,00390625", "0,00195312", "0,00097656", "0,00048828", "0,00024414", "0,00012207", "0,00006104", "0,00003052", "0,00001526", "0,00000763", "0,00000381", "0,00000191", "0,00000095", "0,00000048", "0,00000024", "0,00000012"},
                        {"Bit", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
                },
                new String [] {
                        "", "Sign", "O", "R", "D", "E", "R", "", "", "", "M", "A", "N", "T", "I", "S", "S", "A", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""
                }
        ) {
            boolean[] canEdit = new boolean [] {
                    false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);

        ConvertButton.setText("Convert");
        ConvertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConvertButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1813, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(ANAL_BUTTON__, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                                                        .addComponent(num_f)
                                                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING))
                                                .addGap(56, 56, 56)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(rev_f, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                                                        .addComponent(jLabel2)
                                                        .addComponent(ConvertButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(9, 9, 9)
                                                .addComponent(jLabel1))
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jLabel2)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(num_f, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(rev_f, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(ANAL_BUTTON__)
                                        .addComponent(ConvertButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private void ANAL_BUTTON__ActionPerformed(java.awt.event.ActionEvent evt) {

        float numberFromInput;

        try{
            numberFromInput = Float.parseFloat(num_f.getText());
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(rootPane, e.getMessage(), "Error", ERROR_MESSAGE);
            return;
        }

        // Sign

        if(numberFromInput > 0){
            table.getModel().setValueAt(0, 3, 1);
        }else if(numberFromInput < 0){
            table.getModel().setValueAt(1, 3, 1);
        }else if(numberFromInput == 0){
            table.getModel().setValueAt("-", 3, 1);
        }

        // Order of magnitude

        long bits = Float.floatToRawIntBits(numberFromInput);
        long orderOfMagnitude = 0;
        int weight = 23;

        for(int i = 1; i <= 128; i = i + i){
            long currentBit = bits & (long)Math.pow(2, weight);
            if(currentBit != 0)
                currentBit = 1;
            orderOfMagnitude = orderOfMagnitude + i * currentBit;
            ++weight;
        }

        String binOrder = Long.toBinaryString(orderOfMagnitude);
        while(binOrder.length() < 8){
            binOrder = "0" + binOrder;
        }

        for(int i = 3; i <= 3; ++i){
            for(int j = 2; j <= 9; ++j){
                table.getModel().setValueAt(binOrder.charAt(j - 2), i, j);
            }
        }

        // Mantissa

        float mantissa = 0;
        float bugger = 0.5f;
        for(weight = 22; weight >= 0; --weight){
            long currentBit = bits & (long)Math.pow(2, weight);
            if(currentBit != 0)
                currentBit = 1;
            mantissa = mantissa + bugger * currentBit;
            bugger /= 2;
        }

        bits = Double.doubleToRawLongBits((double)mantissa);
        String binMantissa = Long.toBinaryString(bits);

        while(binMantissa.length() < 100){
            binMantissa += "0";
        }

        for(int i = 3; i <= 3; ++i){
            for(int j = 10; j <= 32; ++j){
                table.getModel().setValueAt(binMantissa.charAt(j - 1), i, j);
            }
        }

    }

    private void ConvertButtonActionPerformed(java.awt.event.ActionEvent evt) {

        String number = "";
        String binOrder = "";
        String binMantissa = "";

        // Error handler

        if(!("0".equals(table.getModel().getValueAt(3, 1).toString()) ||
                "1".equals(table.getModel().getValueAt(3, 1).toString()) ||
                "-".equals(table.getModel().getValueAt(3, 1).toString()))){
            JOptionPane.showMessageDialog(rootPane, "Enter sign correctly!", "Error", ERROR_MESSAGE);
            return;
        }

        for(int i = 3; i <= 3; ++i){
            for(int j = 2; j <= 9; ++j){
                if(!("0".equals(table.getModel().getValueAt(i, j).toString()) || "1".equals(table.getModel().getValueAt(i, j).toString()))){
                    JOptionPane.showMessageDialog(rootPane, "Enter order of magnitude correctly!", "Error", ERROR_MESSAGE);
                    return;
                }
            }
        }

        for(int i = 3; i <= 3; ++i){
            for(int j = 10; j <= 32; ++j){
                if(!("0".equals(table.getModel().getValueAt(i, j).toString()) || "1".equals(table.getModel().getValueAt(i, j).toString()))){
                    JOptionPane.showMessageDialog(rootPane, "Enter mantissa correctly!", "Error", ERROR_MESSAGE);
                    return;
                }
            }
        }

        // Forming sign

        switch (table.getModel().getValueAt(3, 1).toString()) {
            case "0":
                break;
            case "1":
                number += "-";
                break;
            default:
                rev_f.setText("0");
                return;
        }

        // Forming order of magnitude

        for(int i = 3; i <= 3; ++i){
            for(int j = 2; j <= 9; ++j){
                binOrder += table.getModel().getValueAt(i, j).toString();
            }
        }

        // Forming mantissa

        for(int i = 3; i <= 3; ++i){
            for(int j = 10; j <= 32; ++j){
                binMantissa += table.getModel().getValueAt(i, j).toString();
            }
        }

        // Output number

        String binary = binOrder + binMantissa;
        int bits = Integer.parseInt(binary, 2);
        float numberf = Float.intBitsToFloat(bits);
        rev_f.setText(number + Float.toString(numberf));

    }

    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FloatForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(() -> {
            new FloatForm().setVisible(true);
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton ANAL_BUTTON__;
    private javax.swing.JButton ConvertButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField num_f;
    private javax.swing.JTextField rev_f;
    private javax.swing.JTable table;
    // End of variables declaration                   
}
