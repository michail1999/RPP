import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.text.DecimalFormat;
import java.util.LinkedList;
import javax.swing.*;
import static javax.swing.JOptionPane.ERROR_MESSAGE;

public class RootForm extends JFrame implements KeyListener {

    private String wholeText = "";

    public RootForm() {
        initComponents();
        jTextField1.addKeyListener(this);
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("lab4.2 Дюндиков");

        jLabel1.setText("Исходный массив");

        jButton1.setText("Посчитать");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel2.setText("Ошибок: 0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jTextField1)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(jButton1)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel2)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButton1)
                                        .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.getAccessibleContext().setAccessibleName("warn_label");

        pack();
    }// </editor-fold>

    private String spaceStart(String str){
        while(Character.isWhitespace(str.charAt(0))){
            str = str.substring(1);
        }
        return str;
    }

    private String spaceEnd(String str){
        while(Character.isWhitespace(str.charAt(str.length() - 1))){
            str = str.substring(0, str.length() - 1);
        }
        return str;
    }

    private String minusEnd(String str){
        while(str.charAt(str.length() - 1) == '-'){
            str = str.substring(0, str.length() - 1);
        }
        return str;
    }

    private String multiSpace(String str, Integer pos){
        for(; str.charAt(pos + 1) == ' ';){
            str = str.substring(0, pos) + str.substring(pos + 1);
        }
        return str;
    }

    private String minusWithZero(String str, Integer pos){
        if(pos == 0){
            str = str.substring(1);
        }
        else{
            str = str.substring(0, pos) + str.substring(pos + 1);
        }
        return str;
    }

    private String multiMinus(String str, Integer pos){
        for(; str.charAt(pos + 1) == '-';){
            str = str.substring(0, pos) + str.substring(pos + 1);
        }
        return str;
    }

    private String singleMinus(String str, Integer pos){
        for(; str.charAt(pos) == ' ';){
            str = str.substring(0, pos) + str.substring(pos + 1);
        }
        return str;
    }

    private String minusAfterDigit(String str, Integer pos){
        if(pos == str.length() - 1)
            return str;
        else{
            str = str.substring(0, pos) + str.substring(pos + 1);
        }
        return str;
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {

        jLabel2.setText("Warning: 0");
        String text = this.wholeText;
        char[] digits = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};

        if (!text.isEmpty()) {

            for(int i = 0; i < text.length(); ++i){
                if(i == text.length() - 1)
                    break;
                else {
                    if(i - 1 >= 0){
                        for(int j = 0; j < digits.length; ++j){
                            while(text.charAt(i) == '-' && text.charAt(i - 1) == digits[j]){
                                text = minusAfterDigit(text, i);
                                jLabel2.setText("Warning: You can not use minus after digit");
                            }
                        }
                    }
                }
            }

            for(int i = 0; i < text.length(); ++i){
                if(text.charAt(i) == '-' && (i + 1) == text.length())
                    break;
                while(text.charAt(i) == '-' && text.charAt(i + 1) == ' '){
                    text = singleMinus(text, i + 1);
                    jLabel2.setText("Warning: Minus is separated from digit");
                }
            }

            while(text.charAt(0) == ' ' ||
                    text.charAt(text.length() - 1) == ' ' ||
                    text.charAt(text.length() - 1) == '-')
            {
                if(text.charAt(0) == ' '){
                    text = spaceStart(text);
                    jLabel2.setText("Warning: Space in the beginning");
                }
                else if(text.charAt(text.length() - 1) == ' '){
                    text = spaceEnd(text);
                    jLabel2.setText("Warning: Space in the end");
                }
                else if(text.charAt(text.length() - 1) == '-'){
                    text = minusEnd(text);
                    jLabel2.setText("Warning: Minus in the end");
                }
            }

            for(int i = 0; i < text.length(); ++i){
                while(text.charAt(i) == ' ' && text.charAt(i + 1) == ' '){
                    text = multiSpace(text, i);
                    jLabel2.setText("Warning: You can not use multi-space");
                }
            }

            for(int i = 0; i < text.length(); ++i){
                while(text.charAt(i) == '-' && text.charAt(i + 1) == '-'){
                    text = multiMinus(text, i);
                    jLabel2.setText("Warning: You can not use multi-minus");
                }
            }

            for(int i = 0; i < text.length(); ++i){
                while(text.charAt(i) == '-' && text.charAt(i + 1) == '0'){
                    text = minusWithZero(text, i);
                    jLabel2.setText("Warning: You can not use -0");
                }
            }

            jTextField1.setText(text);

            // ------------------------------ Calculations ------------------------------ //

            String num = "";
            LinkedList<Integer> array = new LinkedList<>();

            // adding elements to array
            for(int i = 0; i < text.length();){
                if(i + 1 == text.length()) {
                    num+= text.charAt(i);
                }else {
                    while(text.charAt(i) != ' ' && (i + 1) != text.length()){
                        num += text.charAt(i);
                        ++i;
                        if(i + 1 == text.length())
                            num+= text.charAt(i);
                    }
                }
                array.add(Integer.parseInt(num));
                num = "";
                ++i;
            }

            jTextArea1.setText("Исходный массив\n");
            for(int i = 0; i < array.size(); ++i){
                jTextArea1.append(array.get(i).toString() + "\t");
            }
            jTextArea1.append("\n----------------------------------------------------------------------------------");
            jTextArea1.append("\nСреднее арифметическое положительных элементов\n");
            double sum = 0;
            double kolvo =0;
            double srArifm;
            for(int i = 0; i < array.size(); ++i){
                if(array.get(i) > 0){
                    sum += array.get(i);
                    kolvo++;
                }
            }
            srArifm = sum / kolvo;
            DecimalFormat formatter = new DecimalFormat("#0.00");
            jTextArea1.append(formatter.format(srArifm));
            jTextArea1.append("\n----------------------------------------------------------------------------------");

            Integer[] toBubble = array.toArray(new Integer[array.size()]);

            jTextArea1.append("\nОтсортированный массив\n");
            bubbleSort(toBubble);

            for(int i = 0; i < toBubble.length; ++i){
                String toAdd = Integer.toString(toBubble[i]);
                jTextArea1.append(toAdd + "\t");
            }
            jTextArea1.append("\n");
        } else {
            JOptionPane.showMessageDialog(rootPane, "Empty string!\nYou need to input data", "Error", ERROR_MESSAGE);
        }

    }

    private static void bubbleSort(Integer[] arr){
        int len = arr.length;
        int key;
        for (int i = 1; i < len; i++) {
            key = arr[i];
            int j = i - 1;
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = key;
        }
    }

    public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RootForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RootForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RootForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RootForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RootForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration

    // -------------------------------- KeyListener -------------------------------- //

    @Override
    public void keyTyped(KeyEvent e) {
        // do not use
    }

    @Override
    public void keyPressed(KeyEvent e) {
        // do not use
    }

    @Override
    public void keyReleased(KeyEvent e) {

        int keyCode = e.getKeyCode();

        switch (keyCode) {
            case KeyEvent.VK_0:
                wholeText = jTextField1.getText();
                break;
            case KeyEvent.VK_1:
                wholeText = jTextField1.getText();
                break;
            case KeyEvent.VK_2:
                wholeText = jTextField1.getText();
                break;
            case KeyEvent.VK_3:
                wholeText = jTextField1.getText();
                break;
            case KeyEvent.VK_4:
                wholeText = jTextField1.getText();
                break;
            case KeyEvent.VK_5:
                wholeText = jTextField1.getText();
                break;
            case KeyEvent.VK_6:
                wholeText = jTextField1.getText();
                break;
            case KeyEvent.VK_7:
                wholeText = jTextField1.getText();
                break;
            case KeyEvent.VK_8:
                wholeText = jTextField1.getText();
                break;
            case KeyEvent.VK_9:
                wholeText = jTextField1.getText();
                break;
            case KeyEvent.VK_MINUS:
                wholeText = jTextField1.getText();
                break;
            case KeyEvent.VK_SPACE:
                wholeText = jTextField1.getText();
                break;
            case KeyEvent.VK_BACK_SPACE:
                wholeText = jTextField1.getText();
                break;
            case KeyEvent.VK_RIGHT:
                wholeText = jTextField1.getText();
                break;
            case KeyEvent.VK_LEFT:
                wholeText = jTextField1.getText();
                break;
            case KeyEvent.VK_UP:
                wholeText = jTextField1.getText();
                break;
            case KeyEvent.VK_DOWN:
                wholeText = jTextField1.getText();
                break;
            case KeyEvent.VK_ENTER:
                break;
            case KeyEvent.VK_SHIFT:
                break;
            case KeyEvent.VK_CAPS_LOCK:
                break;
            case KeyEvent.VK_CONTROL:
                break;
            case KeyEvent.VK_ALT:
                break;
            default:
                wholeText = jTextField1.getText();
                wholeText = wholeText.substring(0, wholeText.length() - 1);
                jTextField1.setText(wholeText);
                JOptionPane.showMessageDialog(rootPane, "You pressed the wrong button!", "Error", ERROR_MESSAGE);
                break;
        }
    }
}
